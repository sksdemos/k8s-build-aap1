# This Playbook creates an in-memory inventory used in the subsequent play
#
# ASSUMPTIONS:
# Will make use of sudo password in the configs/password.yml in clear text
#

- name: Checking if NFS storage provisioner needs to be installed
  hosts: localhost
  gather_facts: no
  become: no
  vars_files:
    - 'configs/password.yml'
    - 'configs/cloudinit-config.yml'

  vars:
    ansible_become_password: "{{ sudo_password }}"

  tasks:
    - name: Adding helper hosts to group
      add_host:
        name: '{{ item.value.vm_static_ip }}'
        groups: helper
        ansible_user: '{{ ssh_user_name }}'
      loop: "{{ lookup('dict',cloud_vms_info, wantlist=True) }}"
      when: item.key | regex_search('(utility)') in ['utility']
      loop_control:
        label: output




# Objective is to install NFS Storage Provisioner
#
# ASSUMPTIONS:
# Will make use of sudo password in the configs/password.yml in clear text
#


- name: Attempting to install NFS Storage Provisioner
  hosts: helper
  gather_facts: no
  vars_files:
    - 'configs/k8s-config.yml'
    - 'configs/k8s-addons.yml'

  vars:
    ansible_ssh_private_key_file: ./do-not-delete/ansible_vms_rsa

  tasks:
    - meta: end_play
      when: components.install_nfs_storage_provisioner == false

    - name: Copying kubeconfig resource to helper
      copy:
        src: ~/.kube/config
        dest: /root/.kube/
        mode: '0644'

    - name: Setting Environment variable for k8s access
      lineinfile:
        path: ~/.bashrc
        line: KUBECONFIG=$HOME/.kube/config
        create: yes
        mode: '0644'

    - name: Install NFS server package
      ansible.builtin.yum:
        name:
          - nfs-utils
          - git
          - python3-pip
        state: present

    - name: Create NFS share
      ansible.builtin.file:
        path: "{{ nfs_share }}"
        state: directory
        mode: "{{ nfs_permission }}"
        recurse: yes
        owner: nobody
        group: nobody

    - name: Creates /etc/exports file
      ansible.builtin.lineinfile:
        path: /etc/exports
        state: present
        create: yes
        line: '{{ nfs_share }} {{ nfs_options }}'
      notify: restart NFS server

    - name: export share
      ansible.builtin.command: "exportfs -rav"

    - meta: flush_handlers

    - name: Cloning provisioner repositories
      git:
        repo: '{{ nfs_prov_repo }}'
        dest: '/tmp/nfs-subdir-external-provisioner'
        force: yes

    - name: Ensure OpenShift library is installed.
      pip:
        name: openshift
        state: present

    - name: Create a k8s namespace
      k8s:
        name: '{{ nfs_namespace }}'
        api_version: v1
        kind: Namespace
        state: present

    - name: Set namespace in rbac manifest
      replace:
        path: /tmp/nfs-subdir-external-provisioner/deploy/rbac.yaml
        regexp: 'namespace: default'
        replace: 'namespace: {{ nfs_namespace }}'

    - name: Set namespace in deployment manifest
      replace:
        path: /tmp/nfs-subdir-external-provisioner/deploy/deployment.yaml
        regexp: 'namespace: default'
        replace: 'namespace: {{ nfs_namespace }}'

    - name: Applying RBAC
      k8s:
        state: present
        src: /tmp/nfs-subdir-external-provisioner/deploy/rbac.yaml

    - name: Set NFS server and path
      replace:
        path: /tmp/nfs-subdir-external-provisioner/deploy/deployment.yaml
        regexp: '{{ item.0 }}'
        replace: '{{ item.1 }}'
      loop:
        - ['10.3.243.101','{{ groups.helper[0] }}'] 
        - ['/ifs/kubernetes','{{ nfs_share }}']

    - name: Applying NFS Provisioner Deployment
      k8s:
        state: present
        src: /tmp/nfs-subdir-external-provisioner/deploy/deployment.yaml

    - name: Set storage class name
      replace:
        path: /tmp/nfs-subdir-external-provisioner/deploy/class.yaml
        regexp: 'name: nfs-client'
        replace: 'name: {{ nfs_storageclass_name }}'

    - name: Create NFS Storage Class
      k8s:
        state: present
        src: /tmp/nfs-subdir-external-provisioner/deploy/class.yaml

    - name: Updating application-list.readme
      lineinfile:
        line: '[x] NFS Storage class ready'
        path: cluster-info.readme
        create: yes
      delegate_to: localhost
      become: no



  handlers:
    - name: restart NFS server
      ansible.builtin.service:
        name: nfs-server
        state: restarted
        enabled: true
