# This Playbook creates an in-memory inventory consisting of all master nodes
# that will be used in the subsequent play
#
# ASSUMPTIONS:
# Will make use of sudo password in the configs/password.yml in clear text
#

- name: Creating in-memory inventory for k8s masters
  hosts: localhost
  gather_facts: no
  become: no
  vars_files:
    - 'configs/password.yml'
    - 'configs/cloudinit-config.yml'

  vars:
    ansible_become_password: "{{ sudo_password }}"

  tasks:
    - name: Adding controlplane hosts to group 
      add_host:
        name: '{{ item.value.vm_static_ip }}'
        groups: masters
        ansible_user: '{{ ssh_user_name }}'
      loop: "{{ lookup('dict',cloud_vms_info, wantlist=True) }}"
      when: item.key | regex_search('(master|worker)') in ['master']
      loop_control:
        label: output




# Objective is to initialize k8s master(s) to bootstrap the control plane
#
# ASSUMPTIONS:
# Will make use of sudo password in the configs/password.yml in clear text
# Bootstraps the primary master
# Configures the k8s primary master with Calico CNI network plugin
# In non HA mode it Will configure at least one primary master and build join scripts for worker nodes
# If the playbook detects HA then it will create a primary master and join all secondary masters to the control plane
# It will produce join scripts for secondary masters and worker nodes to join the cluster
#


- name: Starting Kubernetes master configuration
  hosts: '{{ groups.masters[0] }}'
  gather_facts: no
  become: yes
  vars:
    calico_env: '            - name: CALICO_IPV4POOL_CIDR'
    calico_ip: '              value: "{{ pod_nw_cidr }}"'
    ansible_ssh_private_key_file: ./do-not-delete/ansible_vms_rsa

  vars_files:
    - 'configs/password.yml'
    - 'configs/k8s-config.yml'
  tasks:

    - name: Ensure Pip is installed.
      yum:
        name: 
          - python3-pip
          - git
        state: present

    - name: Ensure OpenShift client is installed.
      pip:
        name: openshift
        state: present

    - name: Getting HA status
      include_vars:
        file: configs/ha.yml

    # This will create a virtual IP that will be used by the apiserver
    - name: Starting keepalived for primary master
      service:
        name: keepalived
        state: started
        enabled: true
      when: ha_cluster == true

    - name: Creating initial join script for additional masters
      copy:
        content: "#!/bin/bash\n"
        dest: ~/join_masters.sh
        mode: 0770
      when: ha_cluster == true

    - name: Creating initial join script for workers
      copy:
        content: "#!/bin/bash\n"
        dest: ~/join_workers.sh
        mode: 0770

    - name: Initializing single node control plane
      import_tasks: tasks/single_node_controlplane.yml
      when: ha_cluster == false

    - name: Initializing high availability control plane
      import_tasks: tasks/ha_controlplane.yml
      when: ha_cluster == true

    - name: Creating .kube directory on k8s primary master
      file:
        path: '~/.kube'
        state: directory
        mode: '0755'

    - name: Copying admin.conf to .kube/config file on k8s primary master
      command: 'cp /etc/kubernetes/admin.conf ~/.kube/config'
      changed_when: true

    - name: Setting permissions on .kube/config file on primary master
      file:
        path: '~/.kube/config'
        owner: root
        group: root

    - name: Setting KUBECONFIG Environment variable on primary master
      lineinfile:
        path: ~/.bashrc
        line: KUBECONFIG=$HOME/.kube/config
        create: yes
        mode: '0644'



- name: Adding Secondary master(s) Kubernetes controlplane
  hosts: "{{groups.masters | reject('search',groups.masters[0]) | list}}"
  gather_facts: no
  vars_files:
    - 'configs/k8s-config.yml'
  vars:
    ansible_ssh_private_key_file: ./do-not-delete/ansible_vms_rsa
  tasks:

    - name: Getting HA status
      include_vars:
        file: configs/ha.yml

    - meta: end_play
      when: ha_cluster == false

    - name: Copy join script to secondary master(s)
      copy:
        src: configs/join_masters.sh
        dest: ~/join_masters.sh
        mode: 0770

    - name: Joining secondary master(s) to controlplane
      shell: '~/join_masters.sh > /root/masters-{{ inventory_hostname }}.log'
      changed_when: true
      ignore_errors: yes

    - name: Creating .kube directory on secondary master(s)
      file:
        path: '~/.kube'
        state: directory
        mode: '0755'

    - name: Copying admin.conf to .kube/config file on secondary master(s)
      command: 'cp /etc/kubernetes/admin.conf ~/.kube/config'
      changed_when: true

    - name: Setting permissions on .kube/config file on secondary master(s)
      file:
        path: '~/.kube/config'
        owner: root
        group: root

    - name: Setting KUBECONFIG Environment variable on secondary masters(s)
      lineinfile:
        path: ~/.bashrc
        line: KUBECONFIG=$HOME/.kube/config
        create: yes
        mode: '0644'

    # This will create failover virtual IP that will be used for the apiserver
    - name: Starting keepalived all secondary master(s)
      service:
        name: keepalived
        state: started
        enabled: true

    - name: Pause for 8 seconds for keepalived to sync with primary
      pause:
        seconds: 8
